#include "doctest/doctest.h"

#include <iostream>

#include <ruff/security/diffie_hellman.hpp>

TEST_SUITE("Diffie-Hellman")
{
    using namespace ruff::security;
    TEST_CASE("Send - Recieve")
    {

        std::string p = "50702342087986984684596540672785294493370824085308498450535565701730450879745310594069460940052367603038103747343106687981163754506284021184158903198888031001641800021787453760919626851704381009545624331468658731255109995186698602388616345118779571212089090418972317301933821327897539692633740906524461904910061687459642285855052275274576089050579224477511686171168825003847462222895619169935317974865296291598100558751976216418469984937110507061979400971905781410388336458908816885758419125375047408388601985300884500733923194700051030733653434466714943605845143519933901592158295809020513235827728686129856549511535000228593790299010401739984240789015389649972633253273119008010971111107028536093543116304613269438082468960788836139999390141570158208410234733780007345264440946888072018632119778442194822690635460883177965078378404035306423001560546174260935441728479454887884057082481520089810271912227350884752023760663";
        std::string g = "2";
        DiffieHellman alice_dh(p, g);
        DiffieHellman bob_dh(p, g);

        // Alice sends bob g^x mod p
        auto alice_gx = alice_dh.Send();
        bob_dh.Recieve(alice_gx);

        // Bob sends alice g^y mod p
        auto bob_gy = bob_dh.Send();
        alice_dh.Recieve(bob_gy);

        CHECK_EQ(alice_dh.Key(), bob_dh.Key());
    }
}